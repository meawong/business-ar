[tool.poetry]
name = "business-ar-api"
version = "1.1.6"
description = ""
authors = ["thorwolpert <thor@wolpert.ca>"]
license = "BSD 3-Clause"
readme = "README.md"
packages = [{include = "business_ar_api", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12.2"
flask = "^3.0.3"
flask-sqlalchemy = "^3.1.1"
flask-migrate = "^4.0.4"
launchdarkly-server-sdk = "^8.3.0"
python-dotenv = "^1.0.1"
flask-babel = "^3.1.0"
psycopg2 = "^2.9.5"
flask-jwt-oidc = "^0.7.0"
gunicorn = "^21.2.0"
flask-cors = "^4.0.0"
jsonschema = {extras = ["format"], version = "^4.20.0"}
pg8000 = "^1.31.2"
Jinja2 = "^3.1.2"

[tool.poetry.group.test.dependencies]
black = "^24.4.2"
freezegun = "^1.4.0"
hypothesis = "^6.100.0"
pexpect = "^4.9.0"
pytest = "^7.4.4"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
nanoid = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
faker = "^24.4.0"
lovely-pytest-docker = "^0.3.1"
pylint = "^3.3.1"
flake8-pyproject = "^1.2.3"
flake8 = "^7.1.1"

[tool.pylint.main]
fail-under = 10
max-line-length = 120
ignore = ["migrations", "devops", "tests", ".venv", ".git", ".history"]
ignore-patterns = ["^\\.#"]
ignored-modules= ["flask_sqlalchemy", "sqlalchemy", "SQLAlchemy" , "alembic", "scoped_session"]
ignored-classes= "scoped_session"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
extension-pkg-whitelist = "pydantic"
notes = ["FIXME","XXX","TODO"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = "E1123,E1120,R1710,E0606,C0203,W0707,W0622,R1719,R0022,R0917,R0913,C0209,C0301,W0511,W0613,W0703,W1514,R0801,R0902,R0903,R0911,R0401,R1705,R1718,W3101,W1309,W0611,E1101,C0103,E0611,R0914,E0213"
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
variable-naming-style = "snake_case"
docstring-min-length = -1
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.flake8]
ignore = ["F401","E402", "Q000", "E203", "W503","F541"]
exclude = [
    ".venv",
    ".git",
    ".history",
    "devops",
    "*migrations*",
    "tests",
]
per-file-ignores = [
    "__init__.py:F401",
    "*.py:B902"
]
max-line-length = 120
docstring-min-length=10
count = true

[tool.isort]
atomic = true
profile = "black"
line_length = 120
skip_gitignore = true
skip_glob = ["devops"]
known_first_party = ["ar_reminder", "business_ar_api"]

[tool.black]
target-version =  ["py310", "py311", "py312"]
line-length = 120
include = '\.pyi?$'
extend-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  migrations
  | devops
)/
'''

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"